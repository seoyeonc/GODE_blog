{
  "hash": "e0ea0603605cf6ec1708429ed2cb2c60",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"[GODE]Final Graph code for GODE Paper\"\nauthor: \"SEOYEON CHOI\"\ndate: \"2023-12-28\"\nexecute: \n  enabled: true\n  cache: false\n  freeze: false\n  error: true\n---\n\n# Import\n\n::: {#b5e6bcf7-f585-4ca5-8900-81254d3b2e6b .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport tqdm\nfrom haversine import haversine\nimport plotly.express as px\nimport matplotlib.pyplot as plt \nimport warnings\nwarnings.simplefilter(\"ignore\", np.ComplexWarning)\nfrom IPython.display import HTML\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'haversine'\n```\n:::\n:::\n\n\n::: {#b5687c89-4cf2-4660-a29c-f041ff72c796 .cell execution_count=2}\n``` {.python .cell-code}\nfrom matplotlib import cm\nfrom pygsp import graphs, filters, plotting, utils\nimport plotly.graph_objects as go\n\nimport rpy2\nimport rpy2.robjects as ro \nfrom rpy2.robjects.vectors import FloatVector \nfrom rpy2.robjects.packages import importr\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'pygsp'\n```\n:::\n:::\n\n\n::: {#09d5b370-79e0-493f-a11e-91d52494863d .cell execution_count=3}\n``` {.python .cell-code}\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n:::\n\n\n::: {#7c466680-0d99-42b3-a49b-9bee1cb7579e .cell execution_count=4}\n``` {.python .cell-code}\nimport pickle\n```\n:::\n\n\n## Earthquake\n\n::: {#9830a5dd-9ad9-4a80-994a-49132f6581f0 .cell execution_count=5}\n``` {.python .cell-code}\ndf= pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n```\n:::\n\n\n::: {#d9eb32d2-3ac5-4815-a15c-468da16e27cd .cell execution_count=6}\n``` {.python .cell-code}\ndf_global= pd.concat([pd.read_csv('00_05.csv'),pd.read_csv('05_10.csv'),pd.read_csv('10_15.csv'),pd.read_csv('15_20.csv')]).iloc[:,[0,1,2,4]].rename(columns={'latitude':'Latitude','longitude':'Longitude','mag':'Magnitude'}).reset_index().iloc[:,1:]\n```\n:::\n\n\n::: {#9ca33495-c153-476a-8c55-af094606f1cb .cell execution_count=7}\n``` {.python .cell-code}\ndf_global = df_global.assign(Year=list(map(lambda x: x.split('-')[0], df_global.time))).iloc[:,1:]\n```\n:::\n\n\n::: {#cfa3a2b2-2313-431b-aa2e-807c8dfa9604 .cell execution_count=8}\n``` {.python .cell-code}\ndf_global.Year = df_global.Year.astype(np.float64)\n```\n:::\n\n\n::: {#074f89e6-18a6-4887-890f-13e690833380 .cell execution_count=9}\n``` {.python .cell-code}\nclass MooYaHo:\n    def __init__(self,df):\n        self.df = df \n        self.f = df.Magnitude.to_numpy()\n        self.year = df.Year.to_numpy()\n        self.lat = df.Latitude.to_numpy()\n        self.long = df.Longitude.to_numpy()\n        self.n = len(self.f)\n        \n        self.theta= None\n    def get_distance(self):\n        self.D = np.zeros([self.n,self.n])\n        locations = np.stack([self.lat, self.long],axis=1)\n        for i in tqdm.tqdm(range(self.n)):\n            for j in range(i,self.n): \n                self.D[i,j]=haversine(locations[i],locations[j])\n        self.D = self.D+self.D.T\n    def get_weightmatrix(self,theta=1,beta=0.5,kappa=4000):\n        self.theta = theta\n        dist = np.where(self.D<kappa,self.D,0)\n        self.W = np.exp(-(dist/self.theta)**2)\n\n    def _eigen(self):\n        d= self.W.sum(axis=1)\n        D= np.diag(d)\n        self.L = np.diag(1/np.sqrt(d)) @ (D-self.W) @ np.diag(1/np.sqrt(d))\n        self.lamb, self.Psi = np.linalg.eigh(self.L)\n        self.Lamb = np.diag(self.lamb)        \n    def fit(self,m):\n        self._eigen()\n        self.fhat = self.Psi[:,0:m]@self.Psi[:,0:m].T@self.f\n        self.df = self.df.assign(MagnitudeHat = self.fhat)\n        self.df = self.df.assign(Residual = self.df.Magnitude- self.df.MagnitudeHat)\n        plt.plot(self.f,'.')\n        plt.plot(self.fhat,'x')\n```\n:::\n\n\n::: {#84462e1e-f3dd-4346-8732-d7950cc2e1d4 .cell execution_count=10}\n``` {.python .cell-code}\nclass MooYaHo2(MooYaHo): # ebayesthresh 기능추가\n    def fit2(self): # fit with ebayesthresh\n        self._eigen()\n        self.fbar = self.Psi.T @ self.f # fbar := graph fourier transform of f\n        self.power = self.fbar**2 \n        ebayesthresh = importr('EbayesThresh').ebayesthresh\n        self.power_threshed=np.array(ebayesthresh(FloatVector(self.fbar**2)))\n        self.fbar_threshed = np.where(self.power_threshed>0,self.fbar,0)\n        self.fhat = self.Psi@self.fbar_threshed\n        self.df = self.df.assign(MagnitudeHat = self.fhat)\n        self.df = self.df.assign(Residual = self.df.Magnitude- self.df.MagnitudeHat)\n        self.con = np.where(self.df.Residual>0.7,1,0)\n```\n:::\n\n\n::: {#d9f3fc12-67b7-400b-8adf-d33668d5665d .cell execution_count=11}\n``` {.python .cell-code}\nclass eachlocation(MooYaHo2):\n    def haiti(self,MagThresh=7,ResThresh=1,adjzoom=5,adjmarkersize = 40):\n        fig = px.density_mapbox(self.df, \n                        lat='Latitude', \n                        lon='Longitude', \n                        z='Magnitude', \n                        radius=15,\n                        center=dict(lat=18.4430, lon=-72.5710), \n                        zoom= adjzoom,\n                        height=900,\n                        opacity = 0.8,\n                        mapbox_style=\"open-street-map\",\n                        range_color=[-3,3])\n        fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n        fig.add_scattermapbox(lat = self.df.query('Magnitude > @MagThresh')['Latitude'],\n                      lon = self.df.query('Magnitude > @MagThresh')['Longitude'],\n                      text = self.df.query('Magnitude > @MagThresh')['Magnitude'],\n                      marker_size= 5,\n                      marker_color= 'blue',\n                      opacity = 0.1\n                      )\n        fig.add_scattermapbox(lat = self.df.query('Residual**2 > @ResThresh')['Latitude'],\n                      lon = self.df.query('Residual**2 > @ResThresh')['Longitude'],\n                      text = self.df.query('Magnitude > @ResThresh')['Magnitude'],\n                      marker_size= adjmarkersize,\n                      marker_color= 'red',\n                      opacity = 0.8\n                      )\n        fig.add_trace(go.Scattermapbox(\n                    lat=self.df.query('Residual**2 > @ResThresh')['Latitude'],\n                    lon=self.df.query('Residual**2 > @ResThresh')['Longitude'],\n                    mode='markers',\n                    marker=go.scattermapbox.Marker(\n                        size=20,\n                        color='rgb(255, 255, 255)',\n                        opacity=0.4\n                    )\n                ))\n        return fig \n    def lquique(self,MagThresh=7,ResThresh=1,adjzoom=5, adjmarkersize= 40):\n        fig = px.density_mapbox(self.df, \n                        lat='Latitude', \n                        lon='Longitude', \n                        z='Magnitude', \n                        radius=15,\n                        center=dict(lat=-32.6953, lon=-71.4416), \n                        zoom=adjzoom,\n                        height=900,\n                        opacity = 0.8,\n                        mapbox_style=\"open-street-map\",\n                        range_color=[-7,7])\n        fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n        fig.add_scattermapbox(lat = self.df.query('Magnitude > @MagThresh')['Latitude'],\n                      lon = self.df.query('Magnitude > @MagThresh')['Longitude'],\n                      text = self.df.query('Magnitude > @MagThresh')['Magnitude'],\n                      marker_size= 5,\n                      marker_color= 'blue',\n                      opacity = 0.1\n                      )\n        fig.add_scattermapbox(lat = self.df.query('Residual**2 > @ResThresh')['Latitude'],\n                      lon = self.df.query('Residual**2 > @ResThresh')['Longitude'],\n                      text = self.df.query('Magnitude > @ResThresh')['Magnitude'],\n                      marker_size= adjmarkersize,\n                      marker_color= 'red',\n                      opacity = 0.8\n                      )\n        fig.add_trace(go.Scattermapbox(\n                    lat=self.df.query('Residual**2 > @ResThresh')['Latitude'],\n                    lon=self.df.query('Residual**2 > @ResThresh')['Longitude'],\n                    mode='markers',\n                    marker=go.scattermapbox.Marker(\n                        size=20,\n                        color='rgb(255, 255, 255)',\n                        opacity=0.8\n                    )\n                ))\n        return fig \n    def sichuan(self,MagThresh=7,ResThresh=1,adjzoom=5,adjmarkersize=40):\n        fig = px.density_mapbox(self.df, \n                        lat='Latitude', \n                        lon='Longitude', \n                        z='Magnitude', \n                        radius=15,\n                        center=dict(lat=30.3080, lon=102.8880), \n                        zoom=adjzoom,\n                        height=900,\n                        opacity = 0.6,\n                        mapbox_style=\"open-street-map\",\n                        range_color=[-7,7])\n        fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n        fig.add_scattermapbox(lat = self.df.query('Magnitude > @MagThresh')['Latitude'],\n                      lon = self.df.query('Magnitude > @MagThresh')['Longitude'],\n                      text = self.df.query('Magnitude > @MagThresh')['Magnitude'],\n                      marker_size= 5,\n                      marker_color= 'blue',\n                      opacity = 0.1\n                      )\n        fig.add_scattermapbox(lat = self.df.query('Residual**2 > @ResThresh')['Latitude'],\n                      lon = self.df.query('Residual**2 > @ResThresh')['Longitude'],\n                      text = self.df.query('Magnitude > @ResThresh')['Magnitude'],\n                      marker_size= adjmarkersize,\n                      marker_color= 'red',\n                      opacity = 0.8\n                      )\n        fig.add_trace(go.Scattermapbox(\n                    lat=self.df.query('Residual**2 > @ResThresh')['Latitude'],\n                    lon=self.df.query('Residual**2 > @ResThresh')['Longitude'],\n                    mode='markers',\n                    marker=go.scattermapbox.Marker(\n                        size=20,\n                        color='rgb(255, 255, 255)',\n                        opacity=0.8\n                    )\n                ))\n        return fig \n```\n:::\n\n\n::: {#1fb6fcd4-f370-4874-a188-7b2b113e3cc7 .cell execution_count=12}\n``` {.python .cell-code}\neach_location=eachlocation(df_global.query(\"2010 <= Year < 2015\"))\n```\n:::\n\n\n`-` get distance \n\n::: {#3e5f12f1-5a5a-4238-b38a-1532889b8bd5 .cell execution_count=13}\n``` {.python .cell-code}\neach_location.get_distance()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  0%|                                                                                                                                                                                                                                            | 0/12498 [00:00<?, ?it/s]\r  0%|                                                                                                                                                                                                                                            | 0/12498 [00:00<?, ?it/s]\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'haversine' is not defined\n```\n:::\n:::\n\n\n::: {#81a20094-a6c8-4473-beee-a3ac3bdd1076 .cell execution_count=14}\n``` {.python .cell-code}\neach_location.D[each_location.D>0].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nnan\n```\n:::\n:::\n\n\n::: {#faff3731-d55f-4a13-823b-88ddbcda93c0 .cell execution_count=15}\n``` {.python .cell-code}\nplt.hist(each_location.D[each_location.D>0])\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'plt' is not defined\n```\n:::\n:::\n\n\n`-` weight matrix\n\n::: {#f5ccb545-fae0-4678-8f81-2c09a4aecf46 .cell execution_count=16}\n``` {.python .cell-code}\neach_location.get_weightmatrix(theta=(8810.865423093777),kappa=2500) \n```\n:::\n\n\n`-` fit\n\n::: {#7dfd1edd-6e28-42f8-b5c5-a0ba59614d56 .cell execution_count=17}\n``` {.python .cell-code}\neach_location.fit2()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'importr' is not defined\n```\n:::\n:::\n\n\n::: {#d59b682b-d315-4036-810b-9174186c888b .cell execution_count=18}\n``` {.python .cell-code}\neach_location.haiti(MagThresh=6.9,ResThresh=0.5,adjzoom=5,adjmarkersize=40)\nfig = each_location.haiti(MagThresh=6.9,ResThresh=0.5,adjzoom=5,adjmarkersize=50)\nwith open('earth_haiti.pkl', 'wb') as file:\n    pickle.dump(fig, file)\n\nwith open('earth_haiti.pkl', 'rb') as file:\n    earth_haiti = pickle.load(file)\nearth_haiti.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n::: {#caca70e6-c567-4f0f-a44c-559876983031 .cell execution_count=19}\n``` {.python .cell-code}\neach_location.lquique(MagThresh=6.4,ResThresh=0.4,adjzoom=5,adjmarkersize=40)\nfig = each_location.lquique(MagThresh=6.4,ResThresh=0.4,adjzoom=5,adjmarkersize=50)\n\nwith open('earth_lquique.pkl', 'wb') as file:\n    pickle.dump(fig, file)\n\nwith open('earth_lquique.pkl', 'rb') as file:\n    earth_lquique = pickle.load(file)\nearth_lquique.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n::: {#5f3844a6-d799-4ebf-aa75-38b516ad4230 .cell execution_count=20}\n``` {.python .cell-code}\neach_location.sichuan(MagThresh=6.5,ResThresh=0.4,adjzoom=5,adjmarkersize=40)\nfig = each_location.sichuan(MagThresh=6.5,ResThresh=0.4,adjzoom=5,adjmarkersize=50)\nwith open('earth_sichuan.pkl', 'wb') as file:\n    pickle.dump(fig, file)\n\nwith open('earth_sichuan.pkl', 'rb') as file:\n    earth_sichuan = pickle.load(file)\nearth_sichuan.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n\n\n\n",
    "supporting": [
      "2023-12-28-final_earth_for_visualization_files"
    ],
    "filters": [],
    "includes": {}
  }
}
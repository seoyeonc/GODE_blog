{
  "hash": "e7f247f4ed01772b4501e62b04c6ec1d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"[GODE]Final Graph code for GODE Paper\"\nauthor: \"SEOYEON CHOI\"\ndate: \"2024-06-22\"\nexecute: \n  enabled: true\n  cache: false\n  freeze: false\n  error: true\n---\n\n# Import\n\n::: {#b5e6bcf7-f585-4ca5-8900-81254d3b2e6b .cell execution_count=1}\n``` {.python .cell-code}\nimport tqdm\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport plotly.express as px\nimport warnings\nwarnings.simplefilter(\"ignore\", np.ComplexWarning)\nfrom haversine import haversine\nfrom IPython.display import HTML\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'plotly'\n```\n:::\n:::\n\n\n::: {#b5687c89-4cf2-4660-a29c-f041ff72c796 .cell execution_count=2}\n``` {.python .cell-code}\nfrom matplotlib import cm\nfrom pygsp import graphs, filters, plotting, utils\nimport plotly.graph_objects as go\n\nimport rpy2\nimport rpy2.robjects as ro \nfrom rpy2.robjects.vectors import FloatVector \nfrom rpy2.robjects.packages import importr\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'pygsp'\n```\n:::\n:::\n\n\n::: {#09d5b370-79e0-493f-a11e-91d52494863d .cell execution_count=3}\n``` {.python .cell-code}\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n:::\n\n\n## Linear\n\n::: {#fe6de473-3036-4f3b-9841-44b5e51a68d1 .cell execution_count=4}\n``` {.python .cell-code}\nnp.random.seed(6)\n\nn = 1000\neta_sparsity = 0.05\n\nepsilon = np.around(np.random.normal(size=n),15)\nsignal = np.random.choice(np.concatenate((np.random.uniform(-7, -5, round(n*eta_sparsity/2)).round(15), np.random.uniform(5, 7, round(n*eta_sparsity/2)).round(15), np.repeat(0, n - round(n*eta_sparsity)))), n)\neta = signal + epsilon\n\noutlier_true_linear= signal.copy()\noutlier_true_linear = list(map(lambda x: 1 if x!=0 else 0,outlier_true_linear))\n\nx_1 = np.linspace(0,2,n)\ny1_1 = 5 * x_1\ny_1 = y1_1 + eta # eta = signal + epsilon\n\n_df=pd.DataFrame({'x':x_1, 'y':y_1})\n\nw=np.zeros((n,n))\n\nfor i in range(n):\n    for j in range(n):\n        if i==j :\n            w[i,j] = 0\n        elif np.abs(i-j) <= 1 : \n            w[i,j] = 1\n\nindex_of_trueoutlier_bool = signal!=0\n```\n:::\n\n\n::: {#895c4d0d-d491-452e-9d0a-fc4584bd618a .cell execution_count=5}\n``` {.python .cell-code}\nclass Linear:\n    def __init__(self,df):\n        self.df = df\n        self.y = df.y.to_numpy()\n        self.x = df.x.to_numpy()\n        self.n = len(self.y)\n        self.W = w\n    def _eigen(self):\n        d= self.W.sum(axis=1)\n        D= np.diag(d)\n        self.L = np.diag(1/np.sqrt(d)) @ (D-self.W) @ np.diag(1/np.sqrt(d))\n        self.lamb, self.Psi = np.linalg.eigh(self.L)\n        self.Lamb = np.diag(self.lamb)      \n    def fit(self,sd=20): # fit with ebayesthresh\n        self._eigen()\n        self.ybar = self.Psi.T @ self.y # fbar := graph fourier transform of f\n        self.power = self.ybar**2 \n        ebayesthresh = importr('EbayesThresh').ebayesthresh\n        self.power_threshed=np.array(ebayesthresh(FloatVector(self.power),sd=sd))\n        self.ybar_threshed = np.where(self.power_threshed>0,self.ybar,0)\n        self.yhat = self.Psi@self.ybar_threshed\n        self.df = self.df.assign(yHat = self.yhat)\n        self.df = self.df.assign(Residual = self.df.y- self.df.yHat)\n    def fig(self,ymin=-5,ymax=20,cuts=0,cutf=1495):\n        outlier_GODE_linear_old = (self.df['Residual']**2).tolist()\n        sorted_data = sorted(outlier_GODE_linear_old,reverse=True)\n        index = int(len(sorted_data) * eta_sparsity)\n        five_percent = sorted_data[index]\n        outlier_GODE_linear = list(map(lambda x: 1 if x > five_percent else 0,outlier_GODE_linear_old))\n        outlier_GODE_linear_index = [i for i, value in enumerate(outlier_GODE_linear_old) if value > five_percent]\n\n        fig,ax = plt.subplots(figsize=(10,10))\n        ax.scatter(self.x,self.y,color='gray',s=50)\n        # ax.scatter(self.x[index_of_trueoutlier_bool],self.y[index_of_trueoutlier_bool],color='red',s=50)        \n        ax.scatter(self.x[index_of_trueoutlier_bool],self.y[index_of_trueoutlier_bool],color='red',s=100)\n        ax.plot(self.x[cuts:cutf],self.yhat[cuts:cutf], '--k',lw=3)\n        ax.scatter(self.df.x[outlier_GODE_linear_index],self.df.y[outlier_GODE_linear_index],color='red',s=550,facecolors='none', edgecolors='r')\n        fig.tight_layout()\n        # fig.savefig('fig1_231103.eps',format='eps')\n        # fig.savefig('linear_240623.pdf',format='pdf')\n```\n:::\n\n\n::: {#2e399a8e-4a61-4e99-9368-a20fffe1ae26 .cell execution_count=6}\n``` {.python .cell-code}\n_Linear = Linear(_df)\n_Linear.fit(sd=20)\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'importr' is not defined\n```\n:::\n:::\n\n\n::: {#d93e17f5-46a8-4e7a-9e28-afeb03f71752 .cell execution_count=7}\n``` {.python .cell-code}\n_Linear.fig()\n```\n\n::: {.cell-output .cell-output-error}\n```\nKeyError: 'Residual'\n```\n:::\n:::\n\n\n## Orbit\n\n::: {#962fdb9e-170d-4c75-add3-8c116a39dae2 .cell execution_count=8}\n``` {.python .cell-code}\nn = 1000\neta_sparsity = 0.05\nrandom_seed=77\n```\n:::\n\n\n::: {#d81bcd52-2434-4c3b-a13c-0ba3d0e947a6 .cell execution_count=9}\n``` {.python .cell-code}\nnp.random.seed(777)\nepsilon = np.around(np.random.normal(size=n),15)\nsignal = np.random.choice(np.concatenate((np.random.uniform(-4, -1, round(n * eta_sparsity / 2)).round(15), np.random.uniform(1, 4, round(n * eta_sparsity / 2)).round(15), np.repeat(0, n - round(n * eta_sparsity)))), n)\neta = signal + epsilon\npi=np.pi\nang=np.linspace(-pi,pi-2*pi/n,n)\nr=5+np.cos(np.linspace(0,12*pi,n))\nvx=r*np.cos(ang)\nvy=r*np.sin(ang)\nf1=10*np.sin(np.linspace(0,6*pi,n))\nf = f1 + eta\n_df = pd.DataFrame({'x' : vx, 'y' : vy, 'f' : f,'f1':f1})\noutlier_true_orbit = signal.copy()\noutlier_true_orbit = list(map(lambda x: 1 if x!=0 else 0,outlier_true_orbit))\nindex_of_trueoutlier_bool = signal!=0\n```\n:::\n\n\n::: {#cbd422ae-36af-4479-838a-b73c8c07457e .cell execution_count=10}\n``` {.python .cell-code}\nimport seaborn as sns\n```\n:::\n\n\nheat msp 그려도 되는지?\n\nkappa, \n\nresearch 필요.\n\n하이퍼파라메터 찾는 방법 공부\n\n-----\n\ntex 파일 수정\n\n::: {#70f5593a-2ab7-4d14-a983-30f9d1134816 .cell execution_count=11}\n``` {.python .cell-code}\nclass Orbit:\n    def __init__(self,df):\n        self.df = df \n        self.f = df.f.to_numpy()\n        self.f1 = df.f1.to_numpy()\n        self.x = df.x.to_numpy()\n        self.y = df.y.to_numpy()\n        self.n = len(self.f)\n        self.theta= None\n    def get_distance(self):\n        self.D = np.zeros([self.n,self.n])\n        locations = np.stack([self.x, self.y],axis=1)\n        for i in tqdm.tqdm(range(self.n)):\n            for j in range(i,self.n):\n                self.D[i,j]=np.linalg.norm(locations[i]-locations[j])\n        self.D = self.D + self.D.T\n    def get_weightmatrix(self,theta=1,beta=0.5,kappa=4000):\n        self.theta = theta\n        dist = np.where(self.D < kappa,self.D,0)\n        self.W = np.exp(-(dist/self.theta)**2)\n    def _eigen(self):\n        d= self.W.sum(axis=1)\n        D= np.diag(d)\n        self.L = np.diag(1/np.sqrt(d)) @ (D-self.W) @ np.diag(1/np.sqrt(d))\n        self.lamb, self.Psi = np.linalg.eigh(self.L)\n        self.Lamb = np.diag(self.lamb)       \n    def fit(self,sd=5): # fit with ebayesthresh\n        self._eigen()\n        self.fbar = self.Psi.T @ self.f # fbar := graph fourier transform of f\n        self.power = self.fbar**2 \n        ebayesthresh = importr('EbayesThresh').ebayesthresh\n        self.power_threshed=np.array(ebayesthresh(FloatVector(self.fbar**2),sd=sd))\n        self.fbar_threshed = np.where(self.power_threshed>0,self.fbar,0)\n        self.fhat = self.Psi@self.fbar_threshed\n        self.df = self.df.assign(fHat = self.fhat)\n        self.df = self.df.assign(Residual = self.df.f- self.df.fHat)\n        \n    def fig(self):\n        outlier_GODE_one_old = (_Orbit.df['Residual']**2).tolist()\n        sorted_data = sorted(outlier_GODE_one_old,reverse=True)\n        index = int(len(sorted_data) * 0.05)\n        five_percent = sorted_data[index]\n        outlier_GODE_one = list(map(lambda x: 1 if x > five_percent else 0,outlier_GODE_one_old))\n        outlier_GODE_one_index = [i for i, value in enumerate(outlier_GODE_one_old) if value > five_percent]\n\n        # fig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(30,15),subplot_kw={\"projection\":\"3d\"})\n        # ax1.grid(False)\n        # ax1.scatter3D(self.x[~index_of_trueoutlier_bool],self.y[~index_of_trueoutlier_bool],self.f[~index_of_trueoutlier_bool],zdir='z',color='gray',alpha=0.99,zorder=1)\n        # ax1.scatter3D(self.x[index_of_trueoutlier_bool],self.y[index_of_trueoutlier_bool],self.f[index_of_trueoutlier_bool],zdir='z',s=75,color='red',alpha=0.99,zorder=2)\n        # ax1.scatter3D(self.x[outlier_GODE_one_index],self.y[outlier_GODE_one_index],self.f[outlier_GODE_one_index],edgecolors='red',zdir='z',s=300,facecolors='none',alpha=0.99,zorder=3)\n        # ax1.plot3D(self.x,self.y,self.f1,'--k',lw=3,zorder=10)\n        # ax1.xaxis.pane.fill = False\n        # ax1.yaxis.pane.fill = False\n        # ax1.zaxis.pane.fill = False\n        # ax1.view_init(elev=30., azim=60)\n        \n        # ax2.grid(False)\n        # ax2.scatter3D(self.x[~index_of_trueoutlier_bool],self.y[~index_of_trueoutlier_bool],self.f[~index_of_trueoutlier_bool],zdir='z',color='gray',alpha=0.99,zorder=1)\n        # ax2.scatter3D(self.x[index_of_trueoutlier_bool],self.y[index_of_trueoutlier_bool],self.f[index_of_trueoutlier_bool],zdir='z',s=75,color='red',alpha=0.99,zorder=2)\n        # ax2.scatter3D(self.x[outlier_GODE_one_index],self.y[outlier_GODE_one_index],self.f[outlier_GODE_one_index],edgecolors='red',zdir='z',s=300,facecolors='none',alpha=0.99,zorder=3)      \n        # ax2.plot3D(self.x,self.y,self.f1,'--k',lw=3,zorder=10)\n        # ax2.xaxis.pane.fill = False\n        # ax2.yaxis.pane.fill = False\n        # ax2.zaxis.pane.fill = False\n        # ax2.view_init(elev=30., azim=40)\n        \n        # ax3.grid(False)\n        # ax3.scatter3D(self.x[~index_of_trueoutlier_bool],self.y[~index_of_trueoutlier_bool],self.f[~index_of_trueoutlier_bool],zdir='z',color='gray',alpha=0.99,zorder=1)\n        # ax3.scatter3D(self.x[index_of_trueoutlier_bool],self.y[index_of_trueoutlier_bool],self.f[index_of_trueoutlier_bool],zdir='z',s=75,color='red',alpha=0.99,zorder=2)\n        # ax3.scatter3D(self.x[outlier_GODE_one_index],self.y[outlier_GODE_one_index],self.f[outlier_GODE_one_index],edgecolors='red',zdir='z',s=300,facecolors='none',alpha=0.99,zorder=3)\n        # ax3.plot3D(self.x,self.y,self.f1,'--k',lw=3,zorder=10)\n        # ax3.xaxis.pane.fill = False\n        # ax3.yaxis.pane.fill = False\n        # ax3.zaxis.pane.fill = False\n        # ax3.view_init(elev=30., azim=10)\n        \n        # fig.savefig('fig2_231129.eps',format='eps')\n        # fig.savefig('orbit_231129_3.pdf',format='pdf')\n```\n:::\n\n\n::: {#172f76f5-f318-4225-a566-88930fa4d0b1 .cell execution_count=12}\n``` {.python .cell-code}\n# _Orbit = Orbit(_df)\n```\n:::\n\n\n::: {#929bcd5f-ef30-400f-aa3f-cef99ec9f4a2 .cell execution_count=13}\n``` {.python .cell-code}\n# _Orbit.get_distance()\n```\n:::\n\n\n::: {#e61eeeea-3504-4845-a226-986e98078465 .cell execution_count=14}\n``` {.python .cell-code}\n# _Orbit.get_weightmatrix(theta=(_Orbit.D[_Orbit.D>0].mean()),kappa=2500) \n# _Orbit.fit(sd=15)\n```\n:::\n\n\n::: {#0e740401-88ca-4e11-82de-6db8369dec2e .cell execution_count=15}\n``` {.python .cell-code}\n# %%capture --no-display\n# _Orbit.fig()\n```\n:::\n\n\n::: {#53c99c62-4e7a-49b3-a009-123e3c3f9e8b .cell execution_count=16}\n``` {.python .cell-code}\n_Orbit = Orbit(_df)\n_Orbit.get_distance()\n_Orbit.get_weightmatrix(theta=(_Orbit.D[_Orbit.D>0].mean()),kappa=10) \n_Orbit.fit(sd=15)\n\noutlier_GODE_orbit_old = (_Orbit.df['Residual']**2).tolist()\nsorted_data = sorted(outlier_GODE_orbit_old,reverse=True)\nindex = int(len(sorted_data) * eta_sparsity)\nfive_percent = sorted_data[index]\noutlier_GODE_orbit = list(map(lambda x: 1 if x > five_percent else 0,outlier_GODE_orbit_old))\nfpr, tpr, thresh = roc_curve(outlier_true_orbit, outlier_GODE_orbit)      \nAUC = auc(fpr, tpr)\nAUC\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  0%|                                                                                                                                                                                                                                             | 0/1000 [00:00<?, ?it/s]\r  2%|████                                                                                                                                                                                                                               | 18/1000 [00:00<00:05, 174.75it/s]\r  4%|█████████                                                                                                                                                                                                                          | 40/1000 [00:00<00:04, 200.91it/s]\r  6%|██████████████▊                                                                                                                                                                                                                    | 65/1000 [00:00<00:04, 222.77it/s]\r  9%|███████████████████▉                                                                                                                                                                                                               | 88/1000 [00:00<00:04, 204.43it/s]\r 12%|█████████████████████████▉                                                                                                                                                                                                        | 115/1000 [00:00<00:03, 224.43it/s]\r 14%|████████████████████████████████                                                                                                                                                                                                  | 142/1000 [00:00<00:03, 239.14it/s]\r 17%|██████████████████████████████████████▋                                                                                                                                                                                           | 171/1000 [00:00<00:03, 252.59it/s]\r 20%|█████████████████████████████████████████████▍                                                                                                                                                                                    | 201/1000 [00:00<00:03, 264.67it/s]\r 23%|████████████████████████████████████████████████████▍                                                                                                                                                                             | 232/1000 [00:00<00:02, 276.12it/s]\r 26%|███████████████████████████████████████████████████████████▋                                                                                                                                                                      | 264/1000 [00:01<00:02, 287.80it/s]\r 30%|██████████████████████████████████████████████████████████████████▉                                                                                                                                                               | 296/1000 [00:01<00:02, 296.47it/s]\r 33%|█████████████████████████████████████████████████████████████████████████▋                                                                                                                                                        | 326/1000 [00:01<00:02, 289.95it/s]\r 36%|██████████████████████████████████████████████████████████████████████████████████                                                                                                                                                | 363/1000 [00:01<00:02, 311.13it/s]\r 40%|██████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                       | 401/1000 [00:01<00:01, 330.91it/s]\r 44%|██████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                               | 435/1000 [00:01<00:01, 332.75it/s]\r 48%|████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                     | 479/1000 [00:01<00:01, 363.87it/s]\r 53%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                           | 527/1000 [00:01<00:01, 397.05it/s]\r 58%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                              | 581/1000 [00:01<00:00, 437.98it/s]\r 62%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                    | 625/1000 [00:01<00:00, 438.52it/s]\r 68%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                       | 682/1000 [00:02<00:00, 477.01it/s]\r 76%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                      | 760/1000 [00:02<00:00, 566.99it/s]\r 87%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                             | 870/1000 [00:02<00:00, 724.83it/s]\r100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1000/1000 [00:02<00:00, 435.20it/s]\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'importr' is not defined\n```\n:::\n:::\n\n\n::: {#c2474d9a-e4bd-4e94-9aa1-dc479a61fa50 .cell execution_count=17}\n``` {.python .cell-code}\nkappa_values = list(range(10, 110, 10))  \nn_values = list(range(1000, 11000, 1000))  \neta_sparsity_list = list([0.01,0.05,0.1,0.2])\nrandom_seed=77\ntab_orbit = pd.DataFrame(columns=[\"Accuracy\",\"Precision\",\"Recall\",\"F1\",\"AUC\",\"N\",\"Contamination\"])\n```\n:::\n\n\n::: {#8b6eb161-1bf4-437d-9892-cf9d3aacd584 .cell execution_count=18}\n``` {.python .cell-code}\n# for n in n_values:\n#     for eta_sparsity in eta_sparsity_list:\n        \n#         for kappa in kappa_values:\n    \n#             np.random.seed(777)\n#             epsilon = np.around(np.random.normal(size=n),15)\n#             signal = np.random.choice(np.concatenate((np.random.uniform(-4, -1, round(n * eta_sparsity / 2)).round(15), np.random.uniform(1, 4, round(n * eta_sparsity / 2)).round(15), np.repeat(0, n - round(n * eta_sparsity)))), n)\n#             eta = signal + epsilon\n#             pi=np.pi\n#             ang=np.linspace(-pi,pi-2*pi/n,n)\n#             r=5+np.cos(np.linspace(0,12*pi,n))\n#             vx=r*np.cos(ang)\n#             vy=r*np.sin(ang)\n#             f1=10*np.sin(np.linspace(0,6*pi,n))\n#             f = f1 + eta\n#             _df = pd.DataFrame({'x' : vx, 'y' : vy, 'f' : f,'f1':f1})\n#             outlier_true_orbit = signal.copy()\n#             outlier_true_orbit = list(map(lambda x: 1 if x!=0 else 0,outlier_true_orbit))\n#             index_of_trueoutlier_bool = signal!=0\n                \n#             _Orbit = Orbit(_df)\n#             _Orbit.get_distance()\n#             _Orbit.get_weightmatrix(theta=(_Orbit.D[_Orbit.D>0].mean()),kappa=kappa) \n#             _Orbit.fit(sd=15)\n            \n#             outlier_GODE_orbit_old = (_Orbit.df['Residual']**2).tolist()\n#             sorted_data = sorted(outlier_GODE_orbit_old,reverse=True)\n#             index = int(len(sorted_data) * eta_sparsity)\n#             five_percent = sorted_data[index]\n#             outlier_GODE_orbit = list(map(lambda x: 1 if x > five_percent else 0,outlier_GODE_orbit_old))\n#             fpr, tpr, thresh = roc_curve(outlier_true_orbit, outlier_GODE_orbit)      \n#             fold_AUC = auc(fpr, tpr)\n        \n#             tab = pd.concat([tab,\n#                        pd.DataFrame({\"n\":[n],\"kappa\":[kappa],\"eta_sparsity\":[eta_sparsity],\"AUC\":[fold_AUC]})])\n            \n```\n:::\n\n\n::: {#1b25791a-89c6-404f-8572-bf4d20a4825b .cell execution_count=19}\n``` {.python .cell-code}\ntab\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'tab' is not defined\n```\n:::\n:::\n\n\n::: {#7d25ea25-14b8-44ad-a136-2aac787f48ac .cell execution_count=20}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))  # 그림 크기 설정 (선택사항)\nsns.heatmap(np.array(tab.AUC).reshape(10,10), annot=True, cmap='coolwarm', square=True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'tab' is not defined\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 768x576 with 0 Axes>\n```\n:::\n:::\n\n\n## Bunny\n\n::: {#a8931155-5607-43f6-a362-1e7ac7027278 .cell execution_count=21}\n``` {.python .cell-code}\nwith open(\"../../2_research/Bunny.pkl\", \"rb\") as file:\n    loaded_obj = pickle.load(file)\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'pickle' is not defined\n```\n:::\n:::\n\n\n::: {#f74fed44-36a8-402a-8897-fcea47c4c440 .cell execution_count=22}\n``` {.python .cell-code}\n_df = pd.DataFrame({'x':loaded_obj['x'],'y':loaded_obj['y'],'z':loaded_obj['z'],'fnoise':loaded_obj['f']+loaded_obj['noise'],'f':loaded_obj['f'],'noise':loaded_obj['noise']})\noutlier_true_bunny = loaded_obj['unif'].copy()\noutlier_true_bunny = list(map(lambda x: 1 if x !=0  else 0,outlier_true_bunny))\nindex_of_trueoutlier_bool_bunny = loaded_obj['unif']!=0\n_W = loaded_obj['W'].copy()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'loaded_obj' is not defined\n```\n:::\n:::\n\n\n::: {#0a54b751-347e-43a2-934f-79a9253c23fd .cell execution_count=23}\n``` {.python .cell-code}\nclass BUNNY:\n    def __init__(self,df):\n        self.df = df \n        self.f = df.f.to_numpy()\n        self.z = df.z.to_numpy()\n        self.x = df.x.to_numpy()\n        self.y = df.y.to_numpy()\n        self.noise = df.noise.to_numpy()\n        self.fnoise = self.f + self.noise\n        self.W = _W\n        self.n = len(self.f)\n        self.theta= None\n    def _eigen(self):\n        d= self.W.sum(axis=1)\n        D= np.diag(d)\n        self.L = np.diag(1/np.sqrt(d)) @ (D-self.W) @ np.diag(1/np.sqrt(d))\n        self.lamb, self.Psi = np.linalg.eigh(self.L)\n        self.Lamb = np.diag(self.lamb)       \n    def fit(self,sd=5): # fit with ebayesthresh\n        self._eigen()\n        self.fbar = self.Psi.T @ self.fnoise # fbar := graph fourier transform of f\n        self.power = self.fbar**2 \n        ebayesthresh = importr('EbayesThresh').ebayesthresh\n        self.power_threshed=np.array(ebayesthresh(FloatVector(self.power),sd=sd))\n        self.fbar_threshed = np.where(self.power_threshed>0,self.fbar,0)\n        self.fhat = self.Psi@self.fbar_threshed\n        self.df = self.df.assign(fnoise = self.fnoise)\n        self.df = self.df.assign(fHat = self.fhat)\n        self.df = self.df.assign(Residual = self.df.f + self.df.noise - self.df.fHat)\n\n    def fig(self):\n\n        outlier_GODE_one_old = (self.df['Residual']**2).tolist()\n        sorted_data = sorted(outlier_GODE_one_old,reverse=True)\n        index = int(len(sorted_data) * 0.05)\n        five_percent = sorted_data[index]\n        outlier_GODE_one = list(map(lambda x: 1 if x > five_percent else 0,outlier_GODE_one_old))\n        outlier_GODE_one_index = [i for i, value in enumerate(outlier_GODE_one_old) if value > five_percent]\n\n        fig = plt.figure(figsize=(30,12),dpi=400)\n        ax1 = fig.add_subplot(251, projection='3d')\n        ax1.grid(False)\n        ax1.scatter3D(self.x,self.y,self.z,c='gray',zdir='z',alpha=0.5,marker='.')\n        ax1.view_init(elev=60., azim=-90)\n\n        ax2= fig.add_subplot(252, projection='3d')\n        ax2.grid(False)\n        ax2.scatter3D(self.x,self.y,self.z,c=self.f,cmap='hsv',zdir='z',marker='.',alpha=0.5,vmin=-12,vmax=10)\n        ax2.view_init(elev=60., azim=-90)\n\n        ax3= fig.add_subplot(253, projection='3d')\n        ax3.grid(False)\n        ax3.scatter3D(self.x,self.y,self.z,c=self.fnoise,cmap='hsv',zdir='z',marker='.',alpha=0.5,vmin=-12,vmax=10)\n        ax3.view_init(elev=60., azim=-90)\n        \n        ax4= fig.add_subplot(254, projection='3d')\n        ax4.grid(False)\n        ax4.scatter3D(self.x,self.y,self.z,c=self.fnoise,cmap='hsv',zdir='z',marker='.',vmin=-12,vmax=10,s=1)\n        ax4.scatter3D(self.x[index_of_trueoutlier_bool_bunny],self.y[index_of_trueoutlier_bool_bunny],self.z[index_of_trueoutlier_bool_bunny],c=self.fnoise[index_of_trueoutlier_bool_bunny],cmap='hsv',zdir='z',marker='.',s=50)\n        ax4.view_init(elev=60., azim=-90)\n\n        ax5= fig.add_subplot(255, projection='3d')\n        ax5.grid(False)\n        ax5.scatter3D(self.x,self.y,self.z,c=self.fnoise,cmap='hsv',zdir='z',marker='.',vmin=-12,vmax=10,s=1)\n        ax5.scatter3D(self.x[index_of_trueoutlier_bool_bunny],self.y[index_of_trueoutlier_bool_bunny],self.z[index_of_trueoutlier_bool_bunny],c=self.fnoise[index_of_trueoutlier_bool_bunny],cmap='hsv',zdir='z',marker='.',s=50)\n        ax5.scatter3D(self.df.x[outlier_GODE_one_index],self.df.y[outlier_GODE_one_index],self.df.z[outlier_GODE_one_index],zdir='z',s=550,marker='.',edgecolors='red',facecolors='none')\n        ax5.view_init(elev=60., azim=-90)\n        \n        ax6 = fig.add_subplot(256, projection='3d')\n        ax6.grid(False)\n        ax6.scatter3D(self.x,self.y,self.z,c='gray',zdir='z',alpha=0.5,marker='.')\n        ax6.view_init(elev=-60., azim=-90)\n\n        ax7= fig.add_subplot(257, projection='3d')\n        ax7.grid(False)\n        ax7.scatter3D(self.x,self.y,self.z,c=self.f,cmap='hsv',zdir='z',marker='.',alpha=0.5,vmin=-12,vmax=10)\n        ax7.view_init(elev=-60., azim=-90)\n\n        ax8= fig.add_subplot(258, projection='3d')\n        ax8.grid(False)\n        ax8.scatter3D(self.x,self.y,self.z,c=self.fnoise,cmap='hsv',zdir='z',marker='.',alpha=0.5,vmin=-12,vmax=10)\n        ax8.view_init(elev=-60., azim=-90)\n        \n        ax9= fig.add_subplot(259, projection='3d')\n        ax9.grid(False)\n        ax9.scatter3D(self.x,self.y,self.z,c=self.fnoise,cmap='hsv',zdir='z',marker='.',vmin=-12,vmax=10,s=1)\n        ax9.scatter3D(self.x[index_of_trueoutlier_bool_bunny],self.y[index_of_trueoutlier_bool_bunny],self.z[index_of_trueoutlier_bool_bunny],c=self.fnoise[index_of_trueoutlier_bool_bunny],cmap='hsv',zdir='z',marker='.',s=50)\n        ax9.view_init(elev=-60., azim=-90)\n\n        ax10= fig.add_subplot(2,5,10, projection='3d')\n        ax10.grid(False)\n        ax10.scatter3D(self.x,self.y,self.z,c=self.fnoise,cmap='hsv',zdir='z',marker='.',vmin=-12,vmax=10,s=1)\n        ax10.scatter3D(self.x[index_of_trueoutlier_bool_bunny],self.y[index_of_trueoutlier_bool_bunny],self.z[index_of_trueoutlier_bool_bunny],c=self.fnoise[index_of_trueoutlier_bool_bunny],cmap='hsv',zdir='z',marker='.',s=50)\n        ax10.scatter3D(self.df.x[outlier_GODE_one_index],self.df.y[outlier_GODE_one_index],self.df.z[outlier_GODE_one_index],zdir='z',s=550,marker='.',edgecolors='red',facecolors='none')\n        ax10.view_init(elev=-60., azim=-90)        \n        # fig.savefig('fig_bunny.eps',format='eps')\n```\n:::\n\n\n::: {#8e35df48-4d71-4e2b-b99a-942ed0ddf690 .cell execution_count=24}\n``` {.python .cell-code}\n_BUNNY = BUNNY(_df)\n_BUNNY.fit(sd=20)\n```\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: 'DataFrame' object has no attribute 'z'\n```\n:::\n:::\n\n\n::: {#50cbe456-6de9-446f-9db7-846d298c99c8 .cell execution_count=25}\n``` {.python .cell-code}\n_BUNNY.fig()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name '_BUNNY' is not defined\n```\n:::\n:::\n\n\n---\n\n::: {#6ab55c34-9c01-4ec6-9c4b-dfd43fd99818 .cell execution_count=26}\n``` {.python .cell-code}\nimport plotly.express as px\nimport pandas as pd\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'plotly'\n```\n:::\n:::\n\n\n# Linear appendix\n\n::: {#5fb8272f-cdcc-418a-bee7-d9d598ecab24 .cell execution_count=27}\n``` {.python .cell-code}\ndata = pd.read_csv('../3_table/Example_1_Dataset.csv')\ndata.rename(columns={'Unnamed: 0': 'Method', 'Comtamination':'Contamination'}, inplace=True)\n# data['Contamination'] = data['Contamination'].astype(str)\n```\n:::\n\n\n## N = 1000, Sparsity = 1%\n\n::: {#4331b697-0d7d-4f6a-8935-d4fdbac41365 .cell execution_count=28}\n``` {.python .cell-code}\nNumber = 1000\nSparsity = 0.01\n```\n:::\n\n\n::: {#6f59b040-ee85-4609-bd32-7af31ffc2837 .cell execution_count=29}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"N=={Number} and Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## N = 1000, Sparsity = 5%\n\n::: {#61150613-ea5b-4926-bfd8-15613b3fc56b .cell execution_count=30}\n``` {.python .cell-code}\nNumber = 1000\nSparsity = 0.05\n```\n:::\n\n\n::: {#4bd2ab36-40ad-4042-aec3-1a96a884f073 .cell execution_count=31}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"N=={Number} and Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## N = 1000, Sparsity = 10%\n\n::: {#8422b501-fc41-4359-9b9c-8a1d39fa9c68 .cell execution_count=32}\n``` {.python .cell-code}\nNumber = 1000\nSparsity = 0.1\n```\n:::\n\n\n::: {#d351f268-7525-415b-88ac-e7e2fae616f3 .cell execution_count=33}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"N=={Number} and Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## N = 5000, Sparsity = 1%\n\n::: {#fa9e0b17-e35a-4482-8797-b4980d0e4a25 .cell execution_count=34}\n``` {.python .cell-code}\nNumber = 5000\nSparsity = 0.01\n```\n:::\n\n\n::: {#c5ecc0ef-d4da-436d-8374-af9e3415aab1 .cell execution_count=35}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"N=={Number} and Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## N = 5000, Sparsity = 5%\n\n::: {#30b531aa-da6e-4f4b-9f80-93032b230e38 .cell execution_count=36}\n``` {.python .cell-code}\nNumber = 5000\nSparsity = 0.05\n```\n:::\n\n\n::: {#0aa90cb8-033c-4dc2-948e-3d3bb3e2e901 .cell execution_count=37}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"N=={Number} and Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## N = 5000, Sparsity = 10%\n\n::: {#f212f474-b0f5-423d-8c75-08d57ea4f328 .cell execution_count=38}\n``` {.python .cell-code}\nNumber = 5000\nSparsity = 0.1\n```\n:::\n\n\n::: {#1d0029c6-a8ad-4363-8752-b964eae1c240 .cell execution_count=39}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"N=={Number} and Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## N = 10000, Sparsity = 1%\n\n::: {#f10ee07a-22c5-4360-9b73-7ee17cf9ed72 .cell execution_count=40}\n``` {.python .cell-code}\nNumber = 10000\nSparsity = 0.01\n```\n:::\n\n\n::: {#5388df6a-9ae7-43b7-a751-2dc417140ecf .cell execution_count=41}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"N=={Number} and Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## N = 10000, Sparsity = 5%\n\n::: {#cb4c0fd4-963a-4878-a76f-821c6ed357a2 .cell execution_count=42}\n``` {.python .cell-code}\nNumber = 10000\nSparsity = 0.05\n```\n:::\n\n\n::: {#4fbf741f-6d1a-4763-ad1b-37ddad691f8e .cell execution_count=43}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"N=={Number} and Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## N = 10000, Sparsity = 10%\n\n::: {#26f3f1db-950f-4892-9406-763e04339426 .cell execution_count=44}\n``` {.python .cell-code}\nNumber = 10000\nSparsity = 0.1\n```\n:::\n\n\n::: {#66d48b72-06ec-48d2-9d43-8ab904b0f248 .cell execution_count=45}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"N=={Number} and Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n**Bunny**\n\n::: {#e87262a1-2bdb-43aa-85d7-0b7a5fb31df8 .cell execution_count=46}\n``` {.python .cell-code}\ndata = pd.read_csv('../3_table/Example_3_Dataset.csv')\ndata.rename(columns={'Unnamed: 0': 'Method'}, inplace=True)\n# data['Contamination'] = data['Contamination'].astype(str)\n```\n:::\n\n\n## Sparsity = 1%\n\n::: {#5838a5f0-6d0e-4397-bbc2-c5de85cb3509 .cell execution_count=47}\n``` {.python .cell-code}\nSparsity = 0.01\n```\n:::\n\n\n::: {#33cd928b-d713-4492-bf54-01bf083dd7db .cell execution_count=48}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## Sparsity = 5%\n\n::: {#09b60e72-5edb-43e9-bac9-3b67acd82e97 .cell execution_count=49}\n``` {.python .cell-code}\nSparsity = 0.05\n```\n:::\n\n\n::: {#a7b7834c-78ce-4f45-ab56-ce622753ced7 .cell execution_count=50}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n## Sparsity = 10%\n\n::: {#a7cc5738-d2b2-4303-88a6-f8999572b63e .cell execution_count=51}\n``` {.python .cell-code}\nSparsity = 0.1\n```\n:::\n\n\n::: {#16db054e-edbb-4669-b886-dd8257960e86 .cell execution_count=52}\n``` {.python .cell-code}\nfig = px.bar(data.query(f\"Contamination=={Sparsity}\").sort_values('AUC',ascending=False), x='Method', y=\"AUC\",\n            width=800, height=600)\nfig.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'px' is not defined\n```\n:::\n:::\n\n\n# Earthquake\n\n::: {#b809b512-27ad-468e-b0ad-704b01d93773 .cell execution_count=53}\n``` {.python .cell-code}\nclass Earthquake:\n    def __init__(self,df):\n        self.df = df \n        self.f = df.Magnitude.to_numpy()\n        self.year = df.Year.to_numpy()\n        self.lat = df.Latitude.to_numpy()\n        self.long = df.Longitude.to_numpy()\n        self.n = len(self.f)\n        \n        self.theta= None\n    def get_distance(self):\n        self.D = np.zeros([self.n,self.n])\n        locations = np.stack([self.lat, self.long],axis=1)\n        for i in tqdm.tqdm(range(self.n)):\n            for j in range(i,self.n): \n                self.D[i,j]=haversine(locations[i],locations[j])\n        self.D1 = self.D+self.D.T\n    def get_weightmatrix(self,theta=1,beta=0.5,kappa=4000):\n        self.theta = theta\n        dist = np.where(self.D<kappa,self.D,0)\n        self.W = np.exp(-(dist/self.theta)**2)\n\n    def _eigen(self):\n        d= self.W.sum(axis=1)\n        D= np.diag(d)\n        self.L = np.diag(1/np.sqrt(d)) @ (D-self.W) @ np.diag(1/np.sqrt(d))\n        self.lamb, self.Psi = np.linalg.eigh(self.L)\n        self.Lamb = np.diag(self.lamb)        \n    def fit(self,m):\n        self._eigen()\n        self.fhat = self.Psi[:,0:m]@self.Psi[:,0:m].T@self.f\n        self.df = self.df.assign(MagnitudeHat = self.fhat)\n        self.df = self.df.assign(Residual = self.df.Magnitude- self.df.MagnitudeHat)\n        plt.plot(self.f,'.')\n        plt.plot(self.fhat,'x')\n```\n:::\n\n\n::: {#265bfea3-ae3b-420e-a607-76b4360f5ae5 .cell execution_count=54}\n``` {.python .cell-code}\nclass Earthquake2(Earthquake): # ebayesthresh 기능추가\n    def fit2(self): # fit with ebayesthresh\n        self._eigen()\n        self.fbar = self.Psi.T @ self.f # fbar := graph fourier transform of f\n        self.power = self.fbar**2 \n        ebayesthresh = importr('EbayesThresh').ebayesthresh\n        self.power_threshed=np.array(ebayesthresh(FloatVector(self.fbar**2)))\n        self.fbar_threshed = np.where(self.power_threshed>0,self.fbar,0)\n        self.fhat = self.Psi@self.fbar_threshed\n        self.df = self.df.assign(MagnitudeHat = self.fhat)\n        self.df = self.df.assign(Residual = self.df.Magnitude- self.df.MagnitudeHat)\n        self.con = np.where(self.df.Residual>0.7,1,0)\n```\n:::\n\n\n::: {#e6c0de2f-4108-47fb-b900-196f8e4a91b2 .cell execution_count=55}\n``` {.python .cell-code}\ndf= pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n```\n:::\n\n\n::: {#c0f0504b-3bad-4c81-aac3-e4401870b682 .cell execution_count=56}\n``` {.python .cell-code}\ndf_global= pd.concat([pd.read_csv('00_05.csv'),pd.read_csv('05_10.csv'),pd.read_csv('10_15.csv'),pd.read_csv('15_20.csv')]).iloc[:,[0,1,2,4]].rename(columns={'latitude':'Latitude','longitude':'Longitude','mag':'Magnitude'}).reset_index().iloc[:,1:]\n```\n:::\n\n\n::: {#da76d3e7-6411-4d2f-a325-c5f4d2985672 .cell execution_count=57}\n``` {.python .cell-code}\ndf_global = df_global.assign(Year=list(map(lambda x: x.split('-')[0], df_global.time))).iloc[:,1:]\n```\n:::\n\n\n::: {#d6773385-8db5-4e31-bfbd-10cb42d273c7 .cell execution_count=58}\n``` {.python .cell-code}\ndf_global.Year = df_global.Year.astype(np.float64)\n```\n:::\n\n\n::: {#93b5eabc-8a07-4fdd-ba9e-7f8efa838ee8 .cell execution_count=59}\n``` {.python .cell-code}\neach_location=Earthquake2(df_global.query(\"2010 <= Year < 2015\"))\n```\n:::\n\n\n::: {#64bb4c1f-0c8a-4c97-8c4c-947a53406834 .cell execution_count=60}\n``` {.python .cell-code}\neach_location.get_distance()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  0%|                                                                                                                                                                                                                                            | 0/12498 [00:00<?, ?it/s]\r  0%|                                                                                                                                                                                                                                            | 0/12498 [00:00<?, ?it/s]\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'haversine' is not defined\n```\n:::\n:::\n\n\n## Distance 분포\n\n- 너무 데이터가 많아 그려지는데 한참 걸리거나 시각적으로 보기 좋지 않음..\n\n::: {#515657db-66fe-4a33-80bd-08658a49678e .cell execution_count=61}\n``` {.python .cell-code}\nplt.plot(np.array(each_location.D).reshape(-1)[np.array(each_location.D).reshape(-1) != 0])\n```\n\n::: {.cell-output .cell-output-display}\n![](2024-06-22-graph_code_JKSS_review_files/figure-html/cell-62-output-1.png){width=590 height=404}\n:::\n:::\n\n\n::: {#abfa6491-1fee-4d89-97d6-694217afa71c .cell execution_count=62}\n``` {.python .cell-code}\nnp.array(each_location.D).reshape(-1)[np.array(each_location.D).reshape(-1) != 0].max()\n```\n\n::: {.cell-output .cell-output-error}\n```\nValueError: zero-size array to reduction operation maximum which has no identity\n```\n:::\n:::\n\n\n::: {#20c968b6-ea92-4728-b5d9-65b3bdefcfa3 .cell execution_count=63}\n``` {.python .cell-code}\nnp.array(each_location.D).reshape(-1)[np.array(each_location.D).reshape(-1) != 0].min()\n```\n\n::: {.cell-output .cell-output-error}\n```\nValueError: zero-size array to reduction operation minimum which has no identity\n```\n:::\n:::\n\n\n## map 에 \bdistance가 2500이하인 구간 표시\n\n::: {#7874526d-439c-4c06-84db-c707ea4604e4 .cell execution_count=64}\n``` {.python .cell-code}\nfrom geopy.distance import distance\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom shapely.geometry import Point\nfrom shapely.geometry.polygon import Polygon\nimport geopandas as gpd\nfrom matplotlib.patches import Polygon as mpl_polygon\n\n# 서울의 위도와 경도\nseoul_lat, seoul_lon = 37.5665, 126.978\n\n# 원형 경계 구간 생성 함수\ndef create_circle(lon, lat, radius_km, num_points=100):\n    \"\"\"Create a circle in lat/lon coordinates\"\"\"\n    circle = []\n    for i in range(num_points):\n        angle = 2 * np.pi * i / num_points\n        destination = distance(kilometers=radius_km).destination((lat, lon), angle)\n        circle.append((destination.longitude, destination.latitude))\n    return circle\n\n# 서울을 중심으로 2,500 km 거리의 원형 경계 구간 생성\nradius_km = 2500\ncircle_coords = create_circle(seoul_lon, seoul_lat, radius_km)\n\n# 원형 경계 구간을 GeoDataFrame으로 변환\npolygon = Polygon(circle_coords)\ngdf = gpd.GeoDataFrame(index=[0], geometry=[polygon], crs='EPSG:4326')\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'geopy'\n```\n:::\n:::\n\n\n::: {#c76743b8-046e-4223-b3b9-d5d64bdf62e3 .cell execution_count=65}\n``` {.python .cell-code}\nimport folium\nfrom folium import features\n\n# 서울의 위치\nseoul_location = [seoul_lat, seoul_lon]\n\n# 기본 지도 생성\nm = folium.Map(location=seoul_location, zoom_start=6)\n\n# 원형 마커 추가\nfolium.Circle(\n    location=seoul_location,\n    radius=2500 * 1000,  # 2,500 km를 미터로 변환\n    color='blue',\n    fill=True,\n    fill_opacity=0.5\n).add_to(m)\n\n# 서울 위치 표시\nfolium.Marker(\n    location=seoul_location,\n    popup='Seoul',\n    icon=folium.Icon(color='red', icon='info-sign')\n).add_to(m)\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'folium'\n```\n:::\n:::\n\n\n::: {#eea69a89-6045-4d1b-9153-0a3e6873cc66 .cell execution_count=66}\n``` {.python .cell-code}\nm\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'm' is not defined\n```\n:::\n:::\n\n\n- 위 그래프 안 보일까봐 캡쳐본 추가\n\n::: {#3f0b619b-37db-4455-8f83-ae06281c1910 .cell execution_count=67}\n``` {.python .cell-code}\nfrom IPython.display import Image\n\nImage('poly.png')\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n![](2024-06-22-graph_code_JKSS_review_files/figure-html/cell-68-output-1.png){}\n:::\n:::\n\n\n\n",
    "supporting": [
      "2024-06-22-graph_code_JKSS_review_files"
    ],
    "filters": [],
    "includes": {}
  }
}